name: Lint YAML services

on:
  pull_request:
    paths:
      - "services/*/*"
    branches:
      - "main"
env:
  YQ_VERSION: 4.45.1
  YAMLLINT_VERSION: 1.32.0
  PYTHON_VERSION: "3.10"

jobs:
  files_changed:
    runs-on: ubuntu-latest
    steps:
      - name: Get file changes
        id: file_changes
        uses: trilom/file-changes-action@1.2.4

      - name: Get added or modified service files
        id: files
        run: |
          added="${{ steps.file_changes.outputs.files_added }}"
          modified="${{ steps.file_changes.outputs.files_modified }}"
      
          all=$(echo -e "$added\n$modified" | sort | uniq)
          filtered=$(echo "$all" | grep '^services/' || true)
      
          if [ -z "$filtered" ]; then
            echo "No relevant service files found."
            echo "::set-output name=files=[]"
          else
            json_list=$(echo "$filtered" | jq -R -s -c 'split("\n")[:-1]')
            echo "::set-output name=files=$json_list"
            echo "files: $json_list"
          fi
      
    outputs:
      files: ${{ steps.files.outputs.files }}

  validate_files:
    runs-on: ubuntu-latest
    needs: [files_changed]
    if: needs.files_changed.outputs.files != '[]'
    strategy:
      fail-fast: false
      matrix:
        file: ${{ fromJson(needs.files_changed.outputs.files) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Get yq executable from cache
        id: cache-yq
        uses: actions/cache@v4
        with:
          key: yq-${{ env.YQ_VERSION }}
          path: ${{ github.workspace }}/yq
          restore-keys: yq

      - name: Download yq
        if: steps.cache-yq.outputs.cache-hit != 'true'
        run: |
          wget https://github.com/mikefarah/yq/releases/download/v$YQ_VERSION/yq_linux_amd64.tar.gz -O yq.tar.gz
          tar -xzf yq.tar.gz
          mv yq_linux_amd64 ${{ github.workspace }}/yq
          chmod +x ${{ github.workspace }}/yq

      - name: Save yq executable to cache
        if: steps.cache-yq.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          key: yq-${{ env.YQ_VERSION }}
          path: ${{ github.workspace }}/yq

      - name: Install yamllint
        run: pip install yamllint==${{ env.YAMLLINT_VERSION }}

      - name: Validate YAML with yamllint
        run: |
          echo "Validating ${{ matrix.file }} with yamllint..."
          yamllint -c yamllint-config.yamllint ${{ matrix.file }}

      - name: Validate YAML syntax
        env:
          PATH: ${{ github.workspace }}/yq:$PATH
        run: |
          file=${{ matrix.file }}
          echo "Validating $file ymal syntax..."

          export YQ_PATH=${{ github.workspace }}/yq

          expected_primary_keys=("name" "enabled" "host" "port" "protocol" "routes" "tags")

          if $YQ_PATH -e '.upstreams[]' "$file" &>/dev/null; then
            if  $YQ_PATH -e '.services[] | has("port")' "$file" &>/dev/null; then
              echo "Error: 'port' must NOT be present in 'services[]' when 'upstreams' is defined."
              exit 1
            fi
            expected_primary_keys=("name" "enabled" "host" "protocol" "routes" "tags")
          fi

          verify_keys_match(){
            found_keys_list=$($YQ_PATH -e "$1 | keys | join(\",\")" "$file")

            for found_keys in $found_keys_list; do
              IFS=',' read -ra keys_array <<< "$found_keys"

              missing_keys=()
              for key in $(eval echo "\${$2[@]}"); do
                [[ ! " ${keys_array[*]} " =~ " ${key} " ]] && missing_keys+=("$key")
              done

              if [[ ${#missing_keys[@]} -ne 0 ]]; then
                echo "Error: Missing mandatory keys in '$1' of $file."
                echo "Missing: ${missing_keys[*]}"
                echo "Found:   ${keys_array[*]}"
                exit 1
              fi
            done

            while IFS= read -r keys; do
              IFS=',' read -ra keys_array <<< "$keys"
              
              last_index=-1
              for key in $(eval echo "\${$2[@]}"); do
                for i in "${!keys_array[@]}"; do
                  if [[ "${keys_array[i]}" == "$key" ]]; then
                    if [[ $i -lt $last_index ]]; then
                      echo "Error: Key order in $1 of $file does not follow the expected sequence."
                      echo "Expected order: $(eval echo "\${$2[*]}")"
                      echo "Found order:    ${keys_array[*]}"
                      exit 1
                    fi
                    last_index=$i
                    break
                  fi
                done
              done
            done < <($YQ_PATH -e "$1 | keys | join(\",\")" "$file")
          }

          verify_only_http_protocols() {
            local identifier="$1"
            shift
            local protocols_list=("$@")

            for protocol in "${protocols_list[@]}"; do
              if [[ "$protocol" != "http" ]]; then
                echo "Error: Invalid '$identifier' protocols in $file: Expected 'http' but got '$protocol'"
                return 1
              fi
            done
          }

          verify_keys_match .services[] expected_primary_keys

          if [[ "$found_keys" =~ (plugins) ]]; then
            if [[ ! "$found_keys" =~ protocol.*(plugins) ]]; then
              echo "Error: File $file does not follow the expected key order."
              echo "key 'plugins' must come after 'protocol'."
              echo "Found:    $found_keys"
              exit 1
            fi

            if [[ ! "$found_keys" =~ plugins.*routes ]]; then
              echo "Error: File $file does not follow the expected key order."
              echo "Key 'plugins' must come before 'routes'."
              echo "Found:    $found_keys"
              exit 1
            fi
          fi

          expected_plugin_keys=("name" "enabled" "protocols" "config")
          if $YQ_PATH -e '.services[].plugins' "$file" &>/dev/null; then
            verify_keys_match .services[].plugins[] expected_plugin_keys

            mapfile -t plugins_protocols < <($YQ_PATH eval '.services[].plugins[].protocols[]' "$file")

            if ! verify_only_http_protocols ".services[].plugins[]" "${plugins_protocols[@]}" ; then
              exit 1
            fi
          fi

          expected_route_keys=("name" "protocols" "paths")
          verify_keys_match .services[].routes[] expected_route_keys

          expected_plugin_route_keys=("name" "enabled" "protocols" "config")
          if $YQ_PATH -e '.services[].routes[].plugins' "$file" &>/dev/null; then
            verify_keys_match .services[].routes[].plugins[] expected_plugin_route_keys

            mapfile -t plugins_routes_protocols < <($YQ_PATH eval '.services[].routes[].plugins[].protocols[]' "$file")

            if ! verify_only_http_protocols ".routes[].plugins[]" "${plugins_routes_protocols[@]}"; then
              exit 1
            fi
          fi

          mapfile -t routes_protocols < <($YQ_PATH eval '.services[].routes[].protocols[]' "$file")
          
          if ! verify_only_http_protocols ".services[].routes[] " "${routes_protocols[@]}"; then
            exit 1
          fi

