name: Lint YAML services

on:
  pull_request:
    paths:
      - "services/staging/test.yml"
    branches:
      - "main"
      - "feat/add-new-test-service-stg"
env:
  YQ_VERSION: 4.45.1
  YAMLLINT_VERSION: 1.32.0
  PYTHON_VERSION: "3.10"

jobs:
  files_changed:
    runs-on: ubuntu-latest
    steps:
      - name: Get file changes
        id: file_changes
        uses: trilom/file-changes-action@1.2.4

      - name: Get files
        id: files
        run: |
          content=$(jq ".[]" $HOME/files.json | grep 'services/' | jq -R -s -c 'split("\n")[:-1]')
          echo "::set-output name=files::$content"
    outputs:
      files: ${{ steps.files.outputs.files }}

  validate_files:
    runs-on: ubuntu-latest
    needs: [files_changed]
    if: needs.files_changed.outputs.files != '[]'
    strategy:
      fail-fast: false
      matrix:
        file: ${{ fromJson(needs.files_changed.outputs.files) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Get yq executable from cache
        id: cache-yq
        uses: actions/cache@v4
        with:
          key: yq-${{ env.YQ_VERSION }}
          path: ${{ github.workspace }}/yq
          restore-keys: yq
  
      - name: Download yq
        if: steps.cache-yq.outputs.cache-hit != 'true'
        run: |
          wget https://github.com/mikefarah/yq/releases/download/v$YQ_VERSION/yq_linux_amd64.tar.gz -O yq.tar.gz
          tar -xzf yq.tar.gz
          mv yq_linux_amd64 ${{ github.workspace }}/yq
          chmod +x ${{ github.workspace }}/yq

      - name: Save yq executable to cache
        if: steps.cache-yq.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          key: yq-${{ env.YQ_VERSION }}
          path: ${{ github.workspace }}/yq
          
      - name: Get yamllint from cache
        id: cache-yamllint
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ env.YAMLLINT_VERSION }}
          restore-keys: |
            pip-${{ runner.os }}-${{ env.PYTHON_VERSION }}-
    
      - name: Install yamllint
        if: steps.cache-yamllint.outputs.cache-hit != 'true'
        run: pip install --cache-dir ~/.cache/pip --upgrade yamllint==${{ env.YAMLLINT_VERSION }}

      - name: Validate YAML with yamllint
        run: |
          echo "Validating ${{ matrix.file }} with yamllint..."
          yamllint -c yamllint-config.yamllint ${{ matrix.file }}

      - name: Validate YAML syntax
        env:
          PATH: ${{ github.workspace }}/yq:$PATH
        run: |
          file=${{ matrix.file }}
          echo "Validating $file ymal syntax..."

          export YQ_PATH=${{ github.workspace }}/yq

          if [[ ! -f "${{ github.workspace }}/yq" ]]; then
            echo "Error: yq executable not found at ${{ github.workspace }}/yq"
            exit 1
          fi

          expected_primary_keys=("name" "enabled" "hosts" "port" "protocols" "routes" "tags")
          for service in $($YQ_PATH -e '.services[] | keys | join(" ")' "$file"); do
            found_keys=($service)
            for key in "${expected_primary_keys[@]}"; do
              if [[ ! " ${found_keys[@]} " =~ " ${key} " ]]; then
                echo "Error: Missing mandatory key '$key' in 'services[]' of $file."
                exit 1
              fi
            done
          done

          while IFS= read -r route_keys; do
            found_keys=($route_keys)
            
            last_index=-1
            for key in "${expected_primary_keys[@]}"; do
              for i in "${!found_keys[@]}"; do
                if [[ "${found_keys[i]}" == "$key" ]]; then
                  if [[ $i -lt $last_index ]]; then
                    echo "Error: order of mandatory keys in services[] of $file does not follow the expected sequence."
                    echo "Expected order: ${expected_primary_keys[*]}"
                    echo "Found order:    ${found_keys[*]}"
                    exit 1
                  fi
                  last_index=$i
                  break
                fi
              done
            done
          done < <($YQ_PATH -e '.services[] | keys | join(" ")' "$file")

          if [[ "$found_keys" =~ (tls_verify|ca_certificates) ]]; then
            if [[ ! "$found_keys" =~ port.*(tls_verify|ca_certificates) ]]; then
              echo "Error: File $file does not follow the expected optional key order."
              echo "Optional keys (tls_verify, ca_certificates) must come after 'port'."
              echo "Found:    $found_keys"
              exit 1
            fi
          fi

          if [[ "$found_keys" =~ (plugins) ]]; then
            if [[ ! "$found_keys" =~ protocol.*(plugins) ]]; then
              echo "Error: File $file does not follow the expected key order."
              echo "key 'plugins' must come after 'protocol'."
              echo "Found:    $found_keys"
              exit 1
          fi

          if [[ ! "$found_keys" =~ plugins.*routes ]]; then
            echo "Error: File $file does not follow the expected key order."
            echo "Key 'plugins' must come before 'routes'."
            echo "Found:    $found_keys"
            exit 1
          fi

          expected_plugin_keys=("name" "enabled" "protocols" "config")
          for service in $($YQ_PATH -e '.services[].plugins[] | keys | join(" ")' "$file"); do
            found_keys=($service)
            for key in "${expected_plugin_keys[@]}"; do
              if [[ ! " ${found_keys[@]} " =~ " ${key} " ]]; then
                echo "Error: Missing mandatory key '$key' in 'plugins[]' of $file."
                exit 1
              fi
            done
          done

          while IFS= read -r route_keys; do
            found_keys=($route_keys)
            
            last_index=-1
            for key in "${expected_plugin_keys[@]}"; do
              for i in "${!found_keys[@]}"; do
                if [[ "${found_keys[i]}" == "$key" ]]; then
                  if [[ $i -lt $last_index ]]; then
                    echo "Error: order of mandatory keys in plugins[] of $file does not follow the expected sequence."
                    echo "Expected order: ${expected_plugin_keys[*]}"
                    echo "Found order:    ${found_keys[*]}"
                    exit 1
                  fi
                  last_index=$i
                  break
                fi
              done
            done
          done < <($YQ_PATH -e '.services[].plugins | keys | join(" ")' "$file")

          plugins_protocols=$($YQ_PATH eval '.services[].plugins[].protocols[]' "$file")
          invalid_plugins_protocols=false

          for protocol in $plugins_protocols; do
            if [[ "$protocol" != "http" ]]; then
              invalid_plugins_protocols=true
              break
            fi
          done

          if [[ "$invalid_plugins_protocols" == true ]]; then
            echo "Error: Invalid plugins protocol inside 'services' in $file: Expected 'http' but got '$plugins_protocols'"
            exit 1
          fi
          done

          expected_route_keys=("name" "hosts" "protocols" "methods" "paths")
          for service in $($YQ_PATH -e '.services[].routes[] | keys | join(" ")' "$file"); do
            found_keys=($service)
            for key in "${expected_route_keys[@]}"; do
              if [[ ! " ${found_keys[@]} " =~ " ${key} " ]]; then
                echo "Error: Missing mandatory key '$key' in 'routes[]' of $file."
                exit 1
              fi
            done
          done

          while IFS= read -r route_keys; do
            found_keys=($route_keys)
            
            last_index=-1
            for key in "${expected_route_keys[@]}"; do
              for i in "${!found_keys[@]}"; do
                if [[ "${found_keys[i]}" == "$key" ]]; then
                  if [[ $i -lt $last_index ]]; then
                    echo "Error: Key order in routes[] of $FILE does not follow the expected sequence."
                    echo "Expected order: ${expected_route_keys[*]}"
                    echo "Found order:    ${found_keys[*]}"
                    exit 1
                  fi
                  last_index=$i
                  break
                fi
              done
            done
            
          done < <($YQ_PATH -e '.services[].routes[] | keys | join(" ")' "$file")

          expected_plugin_route_keys=("name" "enabled" "protocols" "config")
          for service in $($YQ_PATH -e '.services[].routes[].plugins[] | keys | join(" ")' "$file"); do
            found_keys=($service)
            for key in "${expected_plugin_route_keys[@]}"; do
              if [[ ! " ${found_keys[@]} " =~ " ${key} " ]]; then
                echo "Error: Missing mandatory key '$key' in 'services[]' of $file."
                exit 1
              fi
            done
          done

          while IFS= read -r route_keys; do
            found_keys=($route_keys)
            
            last_index=-1
            for key in "${expected_plugin_route_keys[@]}"; do
              for i in "${!found_keys[@]}"; do
                if [[ "${found_keys[i]}" == "$key" ]]; then
                  if [[ $i -lt $last_index ]]; then
                    echo "Error: order of mandatory keys in routes[].plugins[] of $file does not follow the expected sequence."
                    echo "Expected order: ${expected_plugin_route_keys[*]}"
                    echo "Found order:    ${found_keys[*]}"
                    exit 1
                  fi
                  last_index=$i
                  break
                fi
              done
            done
          done < <($YQ_PATH -e '.services[].routes[].plugins[] | keys | join(" ")' "$file"

          routes_protocols=$($YQ_PATH eval '.services[].routes[].protocols[]' "$file")
          invalid_routes_protocols=false

          for protocol in $routes_protocols; do
            if [[ "$protocol" != "http" ]]; then
              invalid_routes_protocols=true
              break
            fi
          done

          if [[ "$invalid_routes_protocols" == true ]]; then
            echo "Error: Invalid routes protocol in $file: Expected 'http' but got '$routes_protocols'"
            exit 1
          fi

          plugins_protocols=$($YQ_PATH eval '.services[].routes[].plugins[].protocols[]' "$file")
          invalid_plugins_protocols=false

          for protocol in $plugins_protocols; do
            if [[ "$protocol" != "http" ]]; then
              invalid_plugins_protocols=true
              break
            fi
          done

          if [[ "$invalid_plugins_protocols" == true ]]; then
            echo "Error: Invalid plugins protocol inside 'routes' in $file: Expected 'http' but got '$plugins_protocols'"
            exit 1
          fi