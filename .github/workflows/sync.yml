name: Push configs to Kong API GW on Staging (All Clusters)

permissions:
  contents: read
  pull-requests: write
  actions: read

on:
  push:
    paths:
      - "ca-certs/staging/*.yml"
      - "consumers/staging/*.yml"
      - "plugins/staging/*.yml"
      - "services/staging/*.yml"
    branches:
      - "main"

jobs:
  setup_environment:
    runs-on: ubuntu-latest
    outputs:
      pr_number: ${{ steps.get_pr_info_and_approver.outputs.pr_number }}
      stable_commit_sha: ${{ steps.get_stable_sha.outputs.sha }}
      env_name: ${{ steps.create_env.outputs.env_name }}
      files_to_apply: ${{ steps.get_files.outputs.files }}
    steps:
      - name: Checkout código
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
    
      - name: 'Get changed files'
        id: get_files
        run: |
          # Usamos git diff para encontrar os arquivos alterados no último commit
          content=$(git diff --name-only HEAD~1 HEAD | grep -E 'ca-certs/staging|...' | jq -R -s -c 'split("\n")[:-1]')
          echo "files=${content}" >> $GITHUB_OUTPUT

      - name: '1. Get PR Info & Determine Approver'
        id: get_pr_info_and_approver
        env: 
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          PR_DATA=$(gh pr list --search "${{ github.sha }}" --state merged --json number,author)
          PR_NUMBER=$(echo "$PR_DATA" | jq '.[0].number')
          PR_AUTHOR=$(echo "$PR_DATA" | jq -r '.[0].author.login')
          
          REVIEWS=$(gh pr view $PR_NUMBER --json reviews --jq '.reviews.[] | select(.state == "APPROVED") | .author.login')
          APPROVAL_COUNT=$(echo "${REVIEWS}" | sort -u | wc -l)
          
          if (( $APPROVAL_COUNT >= 2 )); then
            APPROVER_LOGIN=$PR_AUTHOR
          else
            APPROVER_LOGIN=${{ github.repository_owner }}
          fi

          echo "PR Number: ${PR_NUMBER}"
          echo "Final Approver for Gate: ${APPROVER_LOGIN}"

          echo "pr_number=${PR_NUMBER}" >> $GITHUB_OUTPUT
          echo "approver=${APPROVER_LOGIN}" >> $GITHUB_OUTPUT

      - name: '2. Get Stable Commit SHA'
        id: get_stable_sha
        run: |
          STABLE_SHA=$(git rev-parse HEAD~1)
          echo "sha=$STABLE_SHA" >> $GITHUB_OUTPUT

      - name: '3. Create/Setup Dynamic Environment Gate'
        id: create_env
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          APPROVER: ${{ steps.get_pr_info_and_approver.outputs.approver }}
          PR_NUMBER: ${{ steps.get_pr_info_and_approver.outputs.pr_number }}
        run: |
          ENV_NAME="apply-pr-${PR_NUMBER}"
          echo "env_name=${ENV_NAME}" >> $GITHUB_OUTPUT
          
          USER_ID=$(gh api "users/${APPROVER}" | jq '.id')
          REVIEWERS_JSON="{ \"reviewers\": [ { \"type\": \"User\", \"id\": ${USER_ID} } ] }"
          
          echo "Configuring environment ${ENV_NAME} for approver ${APPROVER}"
          gh api --method PUT "repos/${{ github.repository }}/environments/${ENV_NAME}" --input - <<< "${REVIEWERS_JSON}"

  us_east_1:
    needs: [setup_environment]
    uses: ./.github/workflows/sync-regions.yml
    with:
      region: us-east-1
      region-name: virginia
      environment: ${{ needs.setup_environment.outputs.env_name }}
      stable_commit_sha: ${{ needs.setup_environment.outputs.stable_commit_sha }}
  
  wait_time:
    needs: [us_east_1]
    runs-on: ubuntu-latest
    steps:
      - name: Conditional Sleep
        run: sleep 1s

  us_east_2:
    needs: [setup_environment, wait_time]
    if: success()
    uses: ./.github/workflows/sync-regions.yml
    with:
      region: us-east-1
      region-name: virginia
      environment: ${{ needs.setup_environment.outputs.env_name }}
      stable_commit_sha: ${{ needs.setup_environment.outputs.stable_commit_sha }}


  cleanup-environment:
    runs-on: ubuntu-latest
    if: always()
    needs: [setup_environment, us_east_2]
    steps:
      - name: 'Delete Dynamic Environment'
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          ENV_NAME: ${{ needs.setup_environment.outputs.env_name }}
        run: |
          echo "Limpando o ambiente de decisão: ${ENV_NAME}"
          gh api --method DELETE "repos/${{ github.repository }}/environments/${ENV_NAME}"