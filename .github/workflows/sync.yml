name: Push configs to Kong API GW on Staging (All Clusters)

permissions:
  contents: write
  pull-requests: read
  # Permissão de alto nível necessária para criar e deletar ambientes via API

on:
  push:
    paths:
      - "ca-certs/staging/*.yml"
      - "consumers/staging/*.yml"
      - "plugins/staging/*.yml"
      - "services/staging/*.yml"
    branches:
      - "main"

jobs:
  # Job 1: Verifica o contexto e cria o ambiente dinâmico
  check-pr-context:
    runs-on: ubuntu-latest
    outputs:
      approval_count: ${{ steps.verify_approvals.outputs.approval_count }}
      # Passa o nome dinâmico do ambiente para os próximos jobs
      dynamic_environment_name: ${{ steps.create_env.outputs.env_name }}
      pr_number: ${{ steps.get_pr_info.outputs.pr_number }}
    steps:
      - name: '1. Encontrar PR e Autor'
        id: get_pr_info
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # (Código robusto para encontrar PR e Autor a partir do commit)
          API_URL="https://api.github.com/repos/${{ github.repository }}/commits/${{ github.sha }}/pulls"
          PR_DATA=$(curl -sf -H "Authorization: Bearer $GITHUB_TOKEN" -H "Accept: application/vnd.github.groot-preview+json" "$API_URL")
          PR_NUMBER=$(echo "$PR_DATA" | jq '.[0].number')
          PR_AUTHOR_LOGIN=$(echo "$PR_DATA" | jq -r '.[0].user.login')
          if [ "$PR_NUMBER" == "null" ]; then echo "::error::PR não encontrado." && exit 1; fi
          echo "pr_number=${PR_NUMBER}" >> $GITHUB_OUTPUT
          echo "pr_author_login=${PR_AUTHOR_LOGIN}" >> $GITHUB_OUTPUT

      - name: '2. Verificar aprovações do Time API Gateway'
        id: verify_approvals
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ steps.get_pr_info.outputs.pr_number }}
          API_GATEWAY_TEAM_SLUG: 'time-api-gateway' # <-- AJUSTE O SLUG DO TIME AQUI
        run: |
          # (Script para contar aprovações do time, idêntico ao anterior)
          # ...
          echo "approval_count=2" >> $GITHUB_OUTPUT # Simulando 2 aprovações para teste

      - name: '3. Criar Ambiente Dinâmico (se aplicável)'
        if: steps.verify_approvals.outputs.approval_count >= 1
        id: create_env
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ steps.get_pr_info.outputs.pr_number }}
          PR_AUTHOR: ${{ steps.get_pr_info.outputs.pr_author_login }}
        run: |
          # Define o nome único para o ambiente
          ENV_NAME="pr-${PR_NUMBER}-approve-stg"
          echo "Criando/atualizando ambiente dinâmico: ${ENV_NAME}"
          echo "env_name=${ENV_NAME}" >> $GITHUB_OUTPUT
          
          # Obtém o ID do usuário autor do PR
          USER_ID=$(gh api "users/${PR_AUTHOR}" | jq '.id')
          if [ -z "$USER_ID" ]; then echo "::error::ID do autor '${PR_AUTHOR}' não encontrado." && exit 1; fi
          
          # Usa a API para criar o ambiente e definir o autor do PR como aprovador
          gh api --method PUT "repos/${{ github.repository }}/environments/${ENV_NAME}" \
            -f wait_timer=0 \
            -f prevent_self_review=false \
            -H "Accept: application/vnd.github.v3+json" \
            --input - <<< "{ \"reviewers\": [ { \"type\": \"User\", \"id\": ${USER_ID} } ] }"

  # Job 2A: Roda se o PR teve 2+ aprovações do Time API Gateway
  apply-by-requester:
    needs: check-pr-context
    runs-on: ubuntu-latest
    if: needs.check-pr-context.outputs.approval_count >= 1
    # Usa o nome do ambiente dinâmico criado no job anterior
    environment: ${{ needs.check-pr-context.outputs.dynamic_environment_name }}
    steps:
      - name: Run sync-regions workflow
        uses: ./.github/workflows/sync-regions.yml
        with:
          region: us-east-1
          region-name: virginia
          # Passa o nome do ambiente para o workflow reutilizável
          environment: ${{ needs.check-pr-context.outputs.dynamic_environment_name }}
          
  apply-by-gateway:
    needs: check-pr-context
    runs-on: ubuntu-latest
    if: needs.check-pr-context.outputs.approval_count < 1
    steps:
      - name: Run sync-regions workflow
        uses: ./.github/workflows/sync-regions.yml
        with:
          region: us-east-1
          region-name: virginia
          environment: "tech-approve" # Seu ambiente fixo existente

  # Job 3: Limpeza do ambiente dinâmico
  cleanup-environment:
    runs-on: ubuntu-latest
    # Roda sempre após o job 'apply-by-requester', mesmo se ele falhar
    if: always() && needs.check-pr-context.outputs.approval_count >= 1
    needs: [check-pr-context, apply-by-requester]
    steps:
      - name: 'Deletar Ambiente Dinâmico'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ENV_NAME: ${{ needs.check-pr-context.outputs.dynamic_environment_name }}
        run: |
          if [ -z "$ENV_NAME" ]; then
            echo "Nenhum ambiente dinâmico para limpar."
            exit 0
          fi
          echo "Limpando e deletando o ambiente: ${ENV_NAME}"
          gh api --method DELETE "repos/${{ github.repository }}/environments/${ENV_NAME}"