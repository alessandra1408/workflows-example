# Arquivo: .github/workflows/sync.yml

name: (TESTE) Deploy com Opção de Rollback Integrada

permissions:
  contents: write
  pull-requests: read

on:
  push:
    branches:
      - main # ou sua branch principal de teste

jobs:
  # Job 1: Prepara todo o contexto (arquivos, aprovações, estado estável)
  setup-environment-and-context:
    runs-on: ubuntu-latest
    outputs:
      pr_number: ${{ steps.get_pr_info.outputs.pr_number }}
      stable_commit_sha: ${{ steps.get_stable_sha.outputs.sha }}
      env_name: ${{ steps.create_env.outputs.env_name }}
    steps:
      - name: Checkout código
        uses: actions/checkout@v4
        with: { fetch-depth: 2 }

      - name: '1. Get PR Info'
        id: get_pr_info
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          PR_DATA=$(gh pr list --search "${{ github.sha }}" --state merged --json number,author)
          echo "pr_number=$(echo "$PR_DATA" | jq '.[0].number')" >> $GITHUB_OUTPUT
          echo "pr_author_login=$(echo "$PR_DATA" | jq -r '.[0].author.login')" >> $GITHUB_OUTPUT

      - name: '2. Verify PR Approvals & Determine Approver'
        id: determine_approver
        env: 
           GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          REVIEWS=$(gh pr view ${{ steps.get_pr_info.outputs.pr_number }} --json reviews --jq '.reviews.[] | select(.state == "APPROVED") | .author.login')
          APPROVAL_COUNT=$(echo "${REVIEWS}" | sort -u | wc -l)
          
          if (( $APPROVAL_COUNT >= 2 )); then
            APPROVER_LOGIN=${{ steps.get_pr_info.outputs.pr_author_login }}
          else
            APPROVER_LOGIN=${{ github.repository_owner }}
          fi
          echo "Aprovador definido: ${APPROVER_LOGIN}"
          echo "approver=${APPROVER_LOGIN}" >> $GITHUB_OUTPUT

      - name: '3. Get Stable Commit SHA'
        id: get_stable_sha
        run: |
          STABLE_SHA=$(git rev-parse HEAD~1)
          echo "sha=$STABLE_SHA" >> $GITHUB_OUTPUT

      - name: '4. Create/Setup Dynamic Environment'
        id: create_env
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          APPROVER: ${{ steps.determine_approver.outputs.approver }}
          PR_NUMBER: ${{ steps.get_pr_info.outputs.pr_number }}
        run: |
          ENV_NAME="apply-pr-${PR_NUMBER}"
          echo "env_name=${ENV_NAME}" >> $GITHUB_OUTPUT
          USER_ID=$(gh api "users/${APPROVER}" | jq '.id')
          REVIEWERS_JSON="{ \"reviewers\": [ { \"type\": \"User\", \"id\": ${USER_ID} } ] }"
          gh api --method PUT "repos/${{ github.repository }}/environments/${ENV_NAME}" --input - <<< "${REVIEWERS_JSON}"

  # Job 2: O Portão de Decisão que pausa a pipeline
  deploy-cluster-1:
    needs: setup-environment-and-context
    uses: ./.github/workflows/sync-regions.yml
    with:
      region_name: "Cluster 1 (Virginia)"
      environment_name: ${{ needs.setup-environment-and-context.outputs.env_name }}

  wait-1:
    runs-on: ubuntu-latest
    needs: deploy-cluster-1
    steps:
      - run: sleep 10

  deploy-cluster-2:
    needs: setup-environment-and-context
    uses: ./.github/workflows/sync-regions.yml
    with:
      region_name: "Cluster 2 (Ohio)"
      environment_name: ${{ needs.setup-environment-and-context.outputs.env_name }}

  # ---- JOB DE ROLLBACK CONDICIONAL ----
  trigger-rollback:
    runs-on: ubuntu-latest
    # Roda se QUALQUER job anterior falhou ou foi cancelado (rejeitado)
    needs: [setup-environment-and-context]
    # MUDANÇA PRINCIPAL: Este job agora é um portão de aprovação!
    environment: ${{ needs.setup-environment-and-context.outputs.env_name }} && tech-approve
    steps:
      - name: 'Rollback Approved, Calling Rollback Logic'
        run: echo "Aprovação de Rollback recebida. Executando a reversão..."
      - uses: ./.github/workflows/rollback.yml
        with:
          stable_commit_sha: ${{ needs.setup-environment-and-context.outputs.stable_commit_sha }}
          pr_number_to_revert: ${{ needs.setup-environment-and-context.outputs.pr_number }}


  # Job Final: Limpeza do ambiente dinâmico
  cleanup-environment:
    runs-on: ubuntu-latest
    # Roda sempre, independente do resultado final da pipeline
    if: always()
    needs: [setup-environment-and-context, deploy-cluster-2]
    environment: ${{ needs.setup-environment-and-context.outputs.env_name }} && tech-approve
    steps:
      - name: 'Delete Dynamic Environment'
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          ENV_NAME: ${{ needs.setup-environment-and-context.outputs.env_name }}
        run: |
          echo "Limpando o ambiente: ${ENV_NAME}"
          gh api --method DELETE "repos/${{ github.repository }}/environments/${ENV_NAME}"