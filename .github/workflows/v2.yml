name: V2

permissions:
  contents: write
  pull-requests: write
  actions: read
  deployments: write

on:
  push:
    paths:
      - "ca-certs/staging/*.yml"
      - "consumers/staging/*.yml"
      - "plugins/staging/*.yml"
      - "services/staging/*.yml"
    branches:
      - "main"

  workflow_dispatch:
    inputs:
      pr_number:
        description: 'Número do Pull Request para buscar as alterações'
        required: true
        type: number
      team_label:
        description: 'Label do time para aprovação (ex: team:payments-core-api-gtw)'
        required: true
        type: string

jobs:
  setup_environment:
    runs-on: ubuntu-latest
    outputs:
      pr_number: ${{ steps.determine_env.outputs.out_pr_number }}
      stable_commit_sha: ${{ steps.get_stable_sha.outputs.sha }}
      apply_env: ${{ steps.determine_env.outputs.apply_env }}
      rollback_env: ${{ steps.determine_env.outputs.rollback_env }}
      files_to_apply: ${{ steps.get_files.outputs.files }}
    steps:
      - name: Checkout da branch principal
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN}}
          ref: 'main'
          fetch-depth: 0

      - name: 'Get changed files'
        id: get_files
        run: |
          set -ex
          content=$(git diff --name-only HEAD~1 HEAD | grep -E 'ca-certs/staging|...' | jq -R -s -c 'split("\n")[:-1]')
          echo "files=${content}" >> $GITHUB_OUTPUT

      - name: '1. Determine Environment and Reviewers based on Label'
        id: determine_env
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN}}
        run: |
          set -ex

            if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
              echo "Execução manual: buscando dados do PR #${{ inputs.pr_number }}"
              PR_NUMBER="${{ inputs.pr_number }}"
              PR_DATA=$(gh pr view "$PR_NUMBER" --json number,author,labels)
              PR_AUTHOR=$(echo "$PR_DATA" | jq -r '.author.login')
              # No modo manual, o TEAM_SLUG vem do input do workflow
              TEAM_SLUG=$(echo "${{ inputs.team_label }}" | sed 's/team://g')
            else
              echo "Execução por push: buscando PR associado ao commit"
              PR_DATA=$(gh pr list --search "${{ github.sha }}" --state merged --json number,author,labels)
              PR_NUMBER=$(echo "$PR_DATA" | jq '.[0].number')
              PR_AUTHOR=$(echo "$PR_DATA" | jq -r '.[0].author.login')
              TEAM_SLUG=$(echo "$PR_DATA" | jq -r '.[0].labels[] | .name | select(startswith("team:")) | ltrimstr("team:")')
            fi
            
            if [ -z "$PR_NUMBER" ] || [ "$PR_NUMBER" == "null" ]; then
              echo "::error::Nenhum PR encontrado."
              exit 1
            fi
            
            echo "pr_number=${PR_NUMBER}" >> $GITHUB_OUTPUT
            
            if [[ -z "$TEAM_SLUG" ]]; then
              echo "::notice::Nenhum label 'team:' encontrado. O fluxo seguirá pelo ambiente de aprovação padrão 'tech-approve'."
              echo "apply_env=tech-approve" >> $GITHUB_OUTPUT
              echo "rollback_env=tech-approve" >> $GITHUB_OUTPUT
              exit 0
            fi

            echo "Label 'team:' encontrado. Validando time '${TEAM_SLUG}'..."
            
            TEAM_MEMBERS=$(gh api "orgs/${{ github.repository_owner }}/teams/${TEAM_SLUG}/members" --jq '.[].login')
            
            if [[ -z "$TEAM_MEMBERS" ]]; then
              echo "::error::O time '${TEAM_SLUG}' foi encontrado, mas não possui membros. O workflow não pode continuar."
              exit 1
            fi
                        
            echo "Time válido e com membros. Construindo lista de revisores para ambiente dinâmico..."
            INITIAL_REVIEWERS_JSON="[]"
            for login in $TEAM_MEMBERS; do
              USER_ID=$(gh api "users/${login}" --jq '.id')
              REVIEWER_OBJ=$(jq -n --argjson id "$USER_ID" '{type:"User", id:$id}')
              INITIAL_REVIEWERS_JSON=$(echo "$INITIAL_REVIEWERS_JSON" | jq ". + [$REVIEWER_OBJ]")
            done
            
            apply_env="apply-pr-${PR_NUMBER}"
            TECH_APPROVE_REVIEWERS_JSON=$(gh api "repos/${{ github.repository }}/environments/tech-approve" -q '.protection_rules[] | select(.type == "required_reviewers") | .reviewers | map({type: .type, id: .reviewer.id})' || echo "[]")
            COMBINED_REVIEWERS_JSON=$(echo "$TECH_APPROVE_REVIEWERS_JSON" | jq --slurpfile initial <(echo "$INITIAL_REVIEWERS_JSON") '. + $initial[0] | unique_by(.id)')
            
            PR_AUTHOR_ID=$(gh api "users/${PR_AUTHOR}" --jq '.id')
            COMBINED_REVIEWERS_JSON=$(echo "$COMBINED_REVIEWERS_JSON" | jq --argjson author_id "$PR_AUTHOR_ID" 'map(select(.id != $author_id))')

            echo "Criando/atualizando o ambiente dinâmico '${apply_env}'..."
            gh api \
              --method PUT "repos/${{ github.repository }}/environments/${apply_env}" \
              --field "reviewers=@-" << EOF
            $COMBINED_REVIEWERS_JSON
            EOF

            echo "Ambiente dinâmico '${apply_env}' criado/atualizado com sucesso."
            echo "apply_env=${apply_env}" >> $GITHUB_OUTPUT
            
            rollback_env="rollback-pr-${PR_NUMBER}"

            echo "Criando/atualizando o ambiente dinâmico '${rollback_env}'..."
            gh api \
              --method PUT "repos/${{ github.repository }}/environments/${rollback_env}" \
              --field "reviewers=@-" << EOF
            $COMBINED_REVIEWERS_JSON
            EOF

            echo "Ambiente dinâmico '${rollback_env}' criado/atualizado com sucesso."
            echo "rollback_env=${rollback_env}" >> $GITHUB_OUTPUT

      - name: '2. Get Stable Commit SHA'
        id: get_stable_sha
        run: |
          set -ex
          STABLE_SHA=$(git rev-parse HEAD~1)
          echo "sha=$STABLE_SHA" >> $GITHUB_OUTPUT
      
      - name: 'DEBUG: Final Outputs of setup_environment'
        run: |
          echo "Resumo das saídas geradas:"
          echo "pr_number: ${{ steps.determine_env.outputs.out_pr_number }}"
          echo "stable_commit_sha: ${{ steps.get_stable_sha.outputs.sha }}"
          echo "apply_env: ${{ steps.determine_env.outputs.apply_env }}"
          echo "rollback_env: ${{ steps.determine_env.outputs.rollback_env }}"
          echo "files_to_apply: ${{ steps.get_files.outputs.files }}"

  us_east_1_b:
    needs: [setup_environment]
    uses: ./.github/workflows/sync-regions.yml
    with:
      region: us-east-1-b
      region_name: virginia
      environment: "config-us-east-1-stg"
      stable_commit_sha: ${{ needs.setup_environment.outputs.stable_commit_sha }}
      dynamic_environment: ${{ needs.setup_environment.outputs.apply_env }}
      files_to_apply: ${{ needs.setup_environment.outputs.files_to_apply }}

  show_changes:
    needs: [setup_environment, us_east_1_b]
    runs-on: ubuntu-latest
    outputs:
      commit_has_changes: ${{ steps.revert.outputs.commit_has_changes }}
    steps:
      - name: Checkout da branch principal
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN}}
          ref: 'main'
          fetch-depth: 0

      - name: Reverter arquivos para gerar o diff
        id: revert
        run: |
          echo "Revertendo arquivos para gerar o diff..."

          readarray -t files_to_revert < <(echo '${{ needs.setup_environment.outputs.files_to_apply }}' | jq -r '.[]')

          for file in "${files_to_revert[@]}"; do
            if git cat-file -e "${{ needs.setup_environment.outputs.stable_commit_sha }}:$file" &>/dev/null; then
              echo "Revertendo modificação em: $file"
              git checkout "${{ needs.setup_environment.outputs.stable_commit_sha }}" -- "$file"
            else
              echo "Removendo arquivo novo: $file"
              git rm -- "$file"
            fi
          done

          echo "commit_has_changes=true" >> $GITHUB_OUTPUT

      - name: Publicar diff no Job Summary
        if: ${{ steps.revert.outputs.commit_has_changes }} == 'true'
        run: |
          GIT_DIFF=$(git diff --color=never HEAD)
          if [ ${#GIT_DIFF} -gt 60000 ]; then
            GIT_DIFF="$(echo "$GIT_DIFF" | head -c 60000)\n\n... (diff truncado por ser muito longo)"
          fi
          
          cat <<EOF >> $GITHUB_STEP_SUMMARY
          ## ⚠️ Aprovação Necessária para Rollback na \`main\`
          As seguintes alterações (reversão do PR #${{needs.setup_environment.outputs.pr_number}}) serão commitadas diretamente na branch \`main\` após a sua aprovação.
          <details><summary>Clique para ver o diff completo</summary>
          
          \`\`\`diff
          $GIT_DIFF
          \`\`\`
          </details>
          
          **Por favor, revise cuidadosamente e aprove o passo seguinte para continuar.**
          EOF

      - name: Salvar alterações como artefato
        if: ${{ steps.revert.outputs.commit_has_changes }} == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: reverted-files-show
          path: .

  approve_rollback_one_region:
    needs: [setup_environment, us_east_1_b, show_changes]
    runs-on: ubuntu-latest
    environment: ${{needs.setup_environment.outputs.rollback_env}}
    continue-on-error: true
    steps:
      - name: Aprovar Mudanças
        run: echo "Mudanças aprovadas para o ambiente '${{ needs.setup_environment.outputs.rollback_env }}'"

  trigger_rollback_us_east_1_b:
    needs: [setup_environment, us_east_1_b, approve_rollback_one_region]
    uses: ./.github/workflows/sync-regions.yml
    with:
      region: us-east-1-b
      region_name: virginia
      environment: "config-us-east-1-stg"
      is_rollback: true
      stable_commit_sha: ${{ needs.setup_environment.outputs.stable_commit_sha }}
      files_to_apply: ${{ needs.setup_environment.outputs.files_to_apply }}
      dynamic_environment: ${{ needs.setup_environment.outputs.rollback_env }}

  commit_main_changes:
    needs: [setup_environment, approve_rollback_one_region, trigger_rollback_us_east_1_b, show_changes]
    if: needs.trigger_rollback_us_east_1_b.result == 'success'
    uses: ./.github/workflows/update-repo.yml
    with:
      files_to_apply: ${{ needs.setup_environment.outputs.files_to_apply }}
      stable_commit_sha: ${{ needs.setup_environment.outputs.stable_commit_sha }}
      pr_number_to_revert: ${{ needs.setup_environment.outputs.pr_number }}
      dynamic_environment: ${{ needs.setup_environment.outputs.rollback_env }}
    secrets: inherit

  wait_time:
    needs: [us_east_1_b, approve_rollback_one_region]
    runs-on: ubuntu-latest
    if : |
      always() &&
      (needs.approve_rollback_one_region.result == 'failure') &&
      (needs.us_east_1_b.result == 'success')
    steps:
      - name: Conditional Sleep
        run: sleep 3s

  us_east_1:
    needs: [setup_environment, wait_time, approve_rollback_one_region]
    uses: ./.github/workflows/sync-regions.yml
    if: |
      always() &&
      (needs.approve_rollback_one_region.result == 'failure') &&
      (needs.wait_time.result == 'success') &&
      (needs.setup_environment.result == 'success')
    with:
      region: us-east-1
      region_name: virginia
      environment: "config-us-east-1-stg"
      stable_commit_sha: ${{ needs.setup_environment.outputs.stable_commit_sha }}
      dynamic_environment: ${{ needs.setup_environment.outputs.apply_env }}
      files_to_apply: ${{ needs.setup_environment.outputs.files_to_apply }}

  approve_rollback_two_regions:
    needs: [setup_environment, us_east_1, show_changes]
    if: |
      always() &&
      (needs.us_east_1.result == 'success') &&
      (needs.setup_environment.result == 'success')
    runs-on: ubuntu-latest
    environment: ${{needs.setup_environment.outputs.rollback_env}}
    continue-on-error: true
    steps:
      - name: Aprovar Mudanças
        run: echo "Mudanças aprovadas para o ambiente '${{ needs.setup_environment.outputs.rollback_env }}'"

  trigger_rollback_us_east_1_b_second_job:
    needs: [setup_environment, us_east_1, approve_rollback_two_regions]
    if: |
      always() &&
      (needs.approve_rollback_two_regions.result == 'success') &&
      (needs.us_east_1.result == 'success') &&
      (needs.setup_environment.result == 'success')
    uses: ./.github/workflows/sync-regions.yml
    with:
      region: us-east-1-b
      region_name: virginia
      environment: "config-us-east-1-stg"
      is_rollback: true
      stable_commit_sha: ${{ needs.setup_environment.outputs.stable_commit_sha }}
      files_to_apply: ${{ needs.setup_environment.outputs.files_to_apply }}
      dynamic_environment: ${{ needs.setup_environment.outputs.rollback_env }}

  trigger_rollback_us_east_1:
    needs: [setup_environment, us_east_1, approve_rollback_two_regions]
    if: |
      always() &&
      (needs.approve_rollback_two_regions.result == 'success') &&
      (needs.us_east_1.result == 'success') &&
      (needs.setup_environment.result == 'success')
    uses: ./.github/workflows/sync-regions.yml
    with:
      region: us-east-1
      region_name: virginia
      environment: "config-us-east-1-stg"
      is_rollback: true
      stable_commit_sha: ${{ needs.setup_environment.outputs.stable_commit_sha }}
      dynamic_environment: ${{ needs.setup_environment.outputs.apply_env }}
      files_to_apply: ${{ needs.setup_environment.outputs.rollback_env }}

  commit_main_changes_second_job:
    needs: [setup_environment, trigger_rollback_us_east_1, trigger_rollback_us_east_1_b, approve_rollback_two_regions, show_changes]
    if: | 
      always() &&
      (needs.approve_rollback_two_regions.result == 'success') &&
      (needs.trigger_rollback_us_east_1.result == 'success') &&
      (needs.trigger_rollback_us_east_1_b.result == 'success')
    uses: ./.github/workflows/update-repo.yml
    with:
      files_to_apply: ${{ needs.setup_environment.outputs.files_to_apply }}
      stable_commit_sha: ${{ needs.setup_environment.outputs.stable_commit_sha }}
      pr_number_to_revert: ${{ needs.setup_environment.outputs.pr_number }}
      dynamic_environment: ${{ needs.setup_environment.outputs.rollback_env }}
    secrets: inherit

  wait_time_2:
    needs: [us_east_1, approve_rollback_two_regions]
    runs-on: ubuntu-latest
    if : |
      always() &&
      (needs.approve_rollback_two_regions.result == 'failure') &&
      (needs.us_east_1.result == 'success')
    steps:
      - name: Conditional Sleep
        run: sleep 3s

  us_east_2:
    needs: [setup_environment, wait_time_2, approve_rollback_two_regions]
    uses: ./.github/workflows/sync-regions.yml
    if: |
      always() &&
      (needs.approve_rollback_two_regions.result == 'failure') &&
      (needs.wait_time_2.result == 'success') &&
      (needs.setup_environment.result == 'success')
    with:
      region: us-east-2
      region_name: ohio
      environment: "config-us-east-1-stg"
      stable_commit_sha: ${{ needs.setup_environment.outputs.stable_commit_sha }}
      files_to_apply: ${{ needs.setup_environment.outputs.files_to_apply }}
      dynamic_environment: ${{ needs.setup_environment.outputs.apply_env }}
    
  approve_rollback_three_regions:
    needs: [setup_environment, us_east_2, show_changes]
    if: |
      always() &&
      (needs.us_east_2.result == 'success') &&
      (needs.setup_environment.result == 'success')
    runs-on: ubuntu-latest
    continue-on-error: true
    environment: ${{needs.setup_environment.outputs.rollback_env}}
    steps:
      - name: Aprovar Mudanças
        run: echo "Mudanças aprovadas para o ambiente '${{ needs.setup_environment.outputs.rollback_env }}'"

  trigger_rollback_us_east_1_b_third_job:
    needs: [setup_environment, us_east_1, approve_rollback_three_regions]
    if: |
      always() &&
      (needs.approve_rollback_three_regions.result == 'success') &&
      (needs.us_east_1.result == 'success') &&
      (needs.setup_environment.result == 'success')
    uses: ./.github/workflows/sync-regions.yml
    with:
      region: us-east-1-b
      region_name: virginia
      environment: "config-us-east-1-stg"
      is_rollback: true
      stable_commit_sha: ${{ needs.setup_environment.outputs.stable_commit_sha }}
      files_to_apply: ${{ needs.setup_environment.outputs.files_to_apply }}
      dynamic_environment: ${{ needs.setup_environment.outputs.rollback_env }}

  trigger_rollback_us_east_1_second_job:
    needs: [setup_environment, us_east_2, approve_rollback_three_regions]
    if: |
      always() &&
      (needs.approve_rollback_three_regions.result == 'success') &&
      (needs.us_east_2.result == 'success') &&
      (needs.setup_environment.result == 'success')
    uses: ./.github/workflows/sync-regions.yml
    with:
      region: us-east-1
      region_name: virginia
      environment: "config-us-east-1-stg"
      is_rollback: true
      stable_commit_sha: ${{ needs.setup_environment.outputs.stable_commit_sha }}
      dynamic_environment: ${{ needs.setup_environment.outputs.apply_env }}
      files_to_apply: ${{ needs.setup_environment.outputs.rollback_env }}


  trigger_rollback_us_east_2:
    needs: [setup_environment, us_east_2, approve_rollback_three_regions]
    uses: ./.github/workflows/sync-regions.yml
    if: |
      always() &&
      (needs.approve_rollback_three_regions.result == 'success') &&
      (needs.us_east_2.result == 'success') &&
      (needs.setup_environment.result == 'success')
    with:
      region: us-east-2
      region_name: ohio
      environment: "config-us-east-1-stg"
      is_rollback: true
      stable_commit_sha: ${{ needs.setup_environment.outputs.stable_commit_sha }}
      files_to_apply: ${{ needs.setup_environment.outputs.files_to_apply }}
      dynamic_environment: ${{ needs.setup_environment.outputs.rollback_env }}

  commit_main_changes_third_job:
    needs: [setup_environment, trigger_rollback_us_east_2, trigger_rollback_us_east_1_second_job, trigger_rollback_us_east_1_b_third_job, approve_rollback_three_regions, show_changes]
    if: | 
      always() &&
      (needs.approve_rollback_three_regions.result == 'success') &&
      (needs.trigger_rollback_us_east_1_second_job.result == 'success') &&
      (needs.trigger_rollback_us_east_2.result == 'success') &&
      (needs.trigger_rollback_us_east_1_b_third_job.result == 'success')
    uses: ./.github/workflows/update-repo.yml
    with:
      files_to_apply: ${{ needs.setup_environment.outputs.files_to_apply }}
      stable_commit_sha: ${{ needs.setup_environment.outputs.stable_commit_sha }}
      pr_number_to_revert: ${{ needs.setup_environment.outputs.pr_number }}
      dynamic_environment: ${{ needs.setup_environment.outputs.rollback_env }}
    secrets: inherit

  cleanup_environment:
    runs-on: ubuntu-latest
    if: always()
    needs: [setup_environment, us_east_2, trigger_rollback_us_east_2]
    steps:
      - name: Checkout da branch principal
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN}}
          ref: 'main'
          fetch-depth: 0

      - name: 'Delete Dynamic Environment'
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN}}
          apply_env: ${{ needs.setup_environment.outputs.apply_env }}
          rollback_env: ${{ needs.setup_environment.outputs.rollback_env }}
        run: |
          echo "Limpando os ambientes de decisão: ${apply_env} e ${rollback_env}"
            if [[ "$apply_env" != apply-pr-* ]]; then
              echo "::notice::Ambiente '${apply_env}' não será deletado pois não começa com 'apply-pr-'."
              exit 0
            fi
            gh api --method DELETE "repos/${{ github.repository }}/environments/${apply_env}"
            
            if [[ "$rollback_env" == rollback-pr-* ]]; then
              gh api --method DELETE "repos/${{ github.repository }}/environments/${rollback_env}"
              echo "Ambiente '${rollback_env}' deletado com sucesso."
            else
            echo "::notice::Ambiente '${rollback_env}' não será deletado pois não começa com 'rollback-pr-'."
            fi
