name: TEST Sync Rollback Kong Configuration

permissions:
  contents: write
  pull-requests: write
  actions: read
  deployments: write

on:
  workflow_call:
    inputs:
      files_to_apply:
        type: string
        required: true
      stable_commit_sha:
        type: string
        required: false
        default: ''
      pr_number_to_revert:
        type: string
        required: true
      environment:
        type: string
        required: true
      region:
        type: string
        description: "Region"
        required: true
      region_name:
        type: string
        description: "The name of region"
        required: true
      dynamic_environment:
        type: string
        description: "The name of dynamic environment"
        required: true

jobs:
  approve:
    runs-on: ubuntu-latest
    environment: ${{inputs.dynamic_environment}}
    steps:
      - name: Aprovar Mudanças
        run: echo "Mudanças aprovadas para o ambiente '${{ inputs.dynamic_environment }}'"

  prepare-matrix:
    runs-on: ubuntu-latest
    needs: [approve]
    outputs:
      matrix_config: ${{ steps.set-matrix.outputs.matrix_config }}
    steps:
      - name: Generate paired matrix from input strings
        id: set-matrix
        run: |
          # 1. Prepara a matriz de ambientes/regiões
          env_matrix_json=$(paste -d ',' \
            <(echo "${{ inputs.region }}" | tr ',' '\n') \
            <(echo "${{ inputs.region_name }}" | tr ',' '\n') \
            <(echo "${{ inputs.environment }}" | tr ',' '\n') \
            | jq -Rsc 'split("\n") | map(select(. != "")) | map(split(",")) | map({region: .[0], region_name: .[1], environment: .[2]})')

          # 2. Itera de forma segura sobre cada arquivo e combina com os ambientes
          final_matrix="[]"
          echo "${{ inputs.files_to_apply }}" | tr ',' '\n' | while read -r file; do
            final_matrix=$(echo "$final_matrix" | jq -c --arg file "$file" --argjson envs "$env_matrix_json" '. + ($envs | map(. + {file: $file}))')
          done
          
          # 3. Remove quebras de linha para a saída (output)
          matrix_json_oneline=$(echo "$final_matrix" | tr -d '\n\r ')

          # 4. Define a matriz completa como a saída do job
          echo "Matriz de configuração gerada:"
          echo "$final_matrix" | jq .
          echo "matrix_config=$matrix_json_oneline" >> $GITHUB_OUTPUT
  rollback:
    runs-on: ubuntu-latest
    needs: [prepare-matrix]
    environment: ${{ matrix.environment }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare-matrix.outputs.matrix_config) }}
    steps:
      - name: Checkout Code at Correct Version
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.stable_commit_sha }}

      - uses: kong/setup-deck@v1
        with:
          deck-version: 1.47.1

      - name: Deck Sync to ${{ matrix.region_name }} (${{ matrix.region }})
        if: ${{ success() }}
        id: sync
        env:
          TESTE: ${{ secrets[matrix.env].TESTE }}
        run: |
          echo "Iniciando rollback na região: ${{ matrix.region }} (Nome: ${{ matrix.region_name }}) para o ambiente: ${{ matrix.environment }}"
          echo "Valor da secret TESTE: $TESTE"

      - name: validate 
        run: |
          echo "Iniciando job para o arquivo: ${{ matrix.file }}"
          echo "Região: ${{ matrix.region }}"
          echo "Nome da Região: ${{ matrix.region_name }}"
          echo "Ambiente: ${{ matrix.environment }}"