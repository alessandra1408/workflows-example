name: TEST Sync Rollback Kong Configuration

permissions:
  contents: write
  pull-requests: write
  actions: read
  deployments: write

on:
  workflow_call:
    inputs:
      files_to_apply:
        type: string
        required: true
      stable_commit_sha:
        type: string
        required: false
        default: ''
      pr_number_to_revert:
        type: string
        required: true
      environment:
        type: string
        required: true
      region:
        type: string
        description: "Region"
        required: true
      region_name:
        type: string
        description: "The name of region"
        required: true
      dynamic_environment:
        type: string
        description: "The name of dynamic environment"
        required: true

jobs:
  approve:
    runs-on: ubuntu-latest
    environment: ${{inputs.dynamic_environment}}
    steps:
      - name: Aprovar Mudanças
        run: echo "Mudanças aprovadas para o ambiente '${{ inputs.dynamic_environment }}'"

  prepare-matrix:
    runs-on: ubuntu-latest
    needs: [approve]
    outputs:
      matrix_config: ${{ steps.set-matrix.outputs.matrix_config }}
    steps:
      - name: Generate paired matrix from input strings
        id: set-matrix
        run: |
          # 1. Prepara a matriz de ambientes/regiões
          env_matrix_json=$(paste -d ',' \
            <(echo "${{ inputs.region }}" | tr ',' '\n') \
            <(echo "${{ inputs.region_name }}" | tr ',' '\n') \
            <(echo "${{ inputs.environment }}" | tr ',' '\n') \
            | jq -Rsc 'split("\n") | map(select(. != "")) | map(split(",")) | map({region: .[0], region_name: .[1], environment: .[2]})')

          # 2. Itera sobre cada arquivo e cada ambiente para criar a matriz final
          final_matrix="[]"
          for file in ${{ inputs.files_to_apply }}; do
            final_matrix=$(echo "$final_matrix" | jq -c --arg file "$file" --argjson envs "$env_matrix_json" '. + ($envs | map(. + {file: $file}))')
          done
          
          # 3. Remove quebras de linha para a saída (output)
          matrix_json_oneline=$(echo "$final_matrix" | tr -d '\n\r ')

          # 4. Define a matriz completa como a saída do job
          echo "Matriz de configuração gerada:"
          echo "$final_matrix" | jq .
          echo "matrix_config=$matrix_json_oneline" >> $GITHUB_OUTPUT
  rollback:
    runs-on: ubuntu-latest
    needs: [prepare-matrix]
    environment: ${{ matrix.environment }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare-matrix.outputs.matrix_config) }}
    steps:
      - name: Checkout Code at Correct Version
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.stable_commit_sha }}

      - uses: kong/setup-deck@v1
        with:
          deck-version: 1.47.1

      - name: Deck Sync to ${{ matrix.region_name }} (${{ matrix.region }})
        if: ${{ success() }}
        id: sync
        env:
          TESTE: ${{ secrets[matrix.env].TESTE }}
        run: |
          echo "Iniciando rollback na região: ${{ matrix.region }} (Nome: ${{ matrix.region_name }}) para o ambiente: ${{ matrix.environment }}"
          echo "Valor da secret TESTE: $TESTE"

      - name: validate 
        run: |
          echo "Iniciando job para o arquivo: ${{ matrix.file }}"
          echo "Região: ${{ matrix.region }}"
          echo "Nome da Região: ${{ matrix.region_name }}"
          echo "Ambiente: ${{ matrix.environment }}"

  prepare-commit-and-diff:
    runs-on: ubuntu-latest
    needs: [rollback]
    permissions:
      contents: write
      pull-requests: write
      deployments: write
    outputs:
      COMMIT_HAS_CHANGES: ${{ steps.revert.outputs.COMMIT_HAS_CHANGES }}
    steps:
      - name: Checkout da branch principal
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: 'main'
          fetch-depth: 0

      - name: Reverter arquivos para gerar o diff
        id: revert
        run: |
          echo "Revertendo arquivos para gerar o diff..."
          
          mapfile -t files_to_revert < <(echo '${{ inputs.files_to_apply }}' | jq -r '.[]')
          
          if [ ${#files_to_revert[@]} -eq 0 ]; then
            echo "Nenhum arquivo especificado para reverter."
            echo "COMMIT_HAS_CHANGES=false" >> $GITHUB_OUTPUT
          else
            echo "Arquivos a serem revertidos:"
            printf " - %s\n" "${files_to_revert[@]}"
            
            git checkout ${{ inputs.stable_commit_sha }} -- "${files_to_revert[@]}"
            echo "COMMIT_HAS_CHANGES=true" >> $GITHUB_OUTPUT
          fi

      - name: Publicar diff no Job Summary
        if: ${{ steps.revert.outputs.COMMIT_HAS_CHANGES }} == 'true'
        run: |
          GIT_DIFF=$(git diff --color=never HEAD)
          if [ ${#GIT_DIFF} -gt 60000 ]; then
            GIT_DIFF="$(echo "$GIT_DIFF" | head -c 60000)\n\n... (diff truncado por ser muito longo)"
          fi
          
          cat <<EOF >> $GITHUB_STEP_SUMMARY
          ## ⚠️ Aprovação Necessária para Rollback na \`main\`
          As seguintes alterações (reversão do PR #${{ inputs.pr_number_to_revert }}) serão commitadas diretamente na branch \`main\` após a sua aprovação.
          <details><summary>Clique para ver o diff completo</summary>
          
          \`\`\`diff
          $GIT_DIFF
          \`\`\`
          </details>
          
          **Por favor, revise cuidadosamente e aprove o passo seguinte para continuar.**
          EOF

      - name: Salvar alterações como artefato
        if: ${{ steps.revert.outputs.COMMIT_HAS_CHANGES }} == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: reverted-files
          path: .

  wait-for-approval:
    runs-on: ubuntu-latest
    needs: [prepare-commit-and-diff]
    environment: ${{inputs.dynamic_environment}}
    steps:
      - name: Aguardando aprovação
        run: |
          if [[ "${{ needs.prepare-commit-and-diff.outputs.COMMIT_HAS_CHANGES }}" == "false" ]]; then
            echo "Nenhuma mudança para reverter. Aprovação não é necessária."
          else
            echo "Aprovação concedida. Prosseguindo com o commit para a 'main'."
          fi

  execute-commit:
    runs-on: ubuntu-latest
    needs: [wait-for-approval, prepare-commit-and-diff]
    if: needs.prepare-commit-and-diff.outputs.COMMIT_HAS_CHANGES == 'true'
    steps:
      - name: Checkout da branch principal (para contexto Git)
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: 'main'
          fetch-depth: 0

      - name: Baixar artefato com arquivos revertidos
        uses: actions/download-artifact@v4
        with:
          name: reverted-files
          path: .

      - name: Configurar Git
        run: |
          git config --global user.name "payments-api-gateway[bot]"
          git config --global user.email "164028134+payments-api-gateway[bot]@users.noreply.github.com"

      - name: Commitar e Fazer Push para a Main
        run: |
          if ! git diff-index --quiet HEAD; then
            echo "Mudanças detectadas. Realizando commit e push..."
            git add .
            git commit -m "chore(rollback): Reverte arquivos modificados no PR #${{ inputs.pr_number_to_revert }}"
            
            echo "Fazendo push para a branch main..."
            git push origin main
            
            echo "Criando e fazendo push da tag de rollback..."
            TAG_NAME="rollback/pr-${{ inputs.pr_number_to_revert }}_$(date +"%Y%m%d%H%M%S")"
            git tag $TAG_NAME
            git push origin $TAG_NAME
            echo "Rollback concluído e tag ${TAG_NAME} criada."
          else
            echo "Nenhuma mudança detectada no workspace. Nenhum commit será feito."
          fi