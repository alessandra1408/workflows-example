name: Validador de Label de Time no PR

on:
  pull_request:
    types:
      - opened
      - synchronize
      - labeled
      - unlabeled

permissions:
  pull-requests: write
  contents: read

jobs:
  validate_team_label:
    runs-on: ubuntu-latest
    steps:
      - name: '1. Extrair slug do time a partir do label'
        id: get_team
        env:
          LABELS_JSON: ${{ toJSON(github.event.pull_request.labels) }}
        run: |
          team_slug=$(echo "$LABELS_JSON" | jq -r '.[] | .name | select(startswith("team:")) | ltrimstr("team:")')
          echo "team_slug=${team_slug}" >> $GITHUB_OUTPUT

      - name: '2. Tentar buscar membros do time'
        id: get_members
        if: steps.get_team.outputs.team_slug != ''
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo "Buscando membros para o time: ${{ steps.get_team.outputs.team_slug }}"
          # O comando agora joga sua saída para um output do step
          members_list=$(gh api "orgs/${{ github.repository_owner }}/teams/${{ steps.get_team.outputs.team_slug }}/members" --jq '.[].login')
          echo "members=$members_list" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: '3. Preparar comentário com base no resultado'
        id: prepare_comment
        run: |
          TEAM_SLUG="${{ steps.get_team.outputs.team_slug }}"
          GET_MEMBERS_OUTCOME="${{ steps.get_members.outcome }}"
          TEAM_MEMBERS='${{ steps.get_members.outputs.members }}'
          MESSAGE_BODY=""
          JOB_CONCLUSION="success"

          if [[ -z "$TEAM_SLUG" ]]; then
            MESSAGE_BODY="**ℹ️ Fluxo de Aprovação Padrão**

            Nenhum label \`team:...\` encontrado. Ao ser mergeado, este PR seguirá pelo fluxo de aprovação para o apply padrão (apenas time api gateway pode aprovar)."
          elif [[ "$GET_MEMBERS_OUTCOME" == "failure" ]]; then
            MESSAGE_BODY="**❌ Erro: Label de Time Inválido**

            O time \`$TEAM_SLUG\` especificado no label não foi encontrado na organização.
            **Ação Requerida**: Por favor, corrija o nome do time no label \`team:...\` para prosseguir."
            JOB_CONCLUSION="failure"
          elif [[ -z "$TEAM_MEMBERS" ]]; then
            MESSAGE_BODY="**❌ Erro: Time de Aprovadores Vazio**

            O time \`$TEAM_SLUG\` foi encontrado, mas não possui membros.
            **Ação Requerida**: Adicione membros ao time no GitHub ou use um label de um time diferente."
            JOB_CONCLUSION="failure"
          else
            MEMBER_LIST=$(echo "$TEAM_MEMBERS" | sed 's/^/- @/')
            MESSAGE_BODY="**✅ Time de Aprovadores Válido**
            
            O time \`$TEAM_SLUG\` foi localizado. Após o merge, o fluxo seguirá com os seguintes aprovadores (exceto o autor do PR):\n$MEMBER_LIST"
          fi
          
          echo "message<<EOF" >> $GITHUB_OUTPUT
          echo "$MESSAGE_BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "conclusion=$JOB_CONCLUSION" >> $GITHUB_OUTPUT

      - name: '4. Publicar ou atualizar comentário no PR'
        uses: marocchino/sticky-pull-request-comment@v2
        if: always()
        with:
          header: team-label-validation
          message: ${{ steps.prepare_comment.outputs.message }}

      - name: '5. Forçar falha do job se a validação falhou'
        if: steps.prepare_comment.outputs.conclusion == 'failure'
        run: |
          echo "::error::A validação do label do time falhou. Verifique o comentário no PR para mais detalhes."
          exit 1