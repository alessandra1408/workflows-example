name: Push configs to Kong API GW Staging

permissions:
  contents: write
  pull-requests: write
  deployments: write

on:
  workflow_call:
    inputs:
      region:
        type: string
        description: "Region"
        required: true
      region-name:
        type: string
        description: "The name of region"
        required: true
      environment:
        type: string
        description: "The name of environment"
        required: true
      dynamic_environment:
        type: string
        description: "The name of dynamic environment"
        required: true
      files_override:
        type: string
        required: false
        default: ''
      stable_commit_sha:
        type: string
        description: "SHA do commit estável"
        required: false
      pr_number:
        type: string
        description: "Número do PR associado"
        required: false

jobs:
  start_job:
    runs-on: ubuntu-latest
    steps:
      - name: Show who started the job
        run: |
          echo "Iniciando o apply na região de Virginia.
          Este job foi iniciado por: $GITHUB_ACTOR"

  filesChanged:
    if: inputs.files_override == ''
    runs-on: ubuntu-latest
    needs: [start_job]
    steps:
      - id: file_changes
        uses: trilom/file-changes-action@1.2.4

      - name: Get files
        id: files
        run: |
          content=$(jq ".[]" $HOME/files.json | grep -E 'ca-certs/staging|consumers/staging|plugins/staging|services/staging' | grep -v '.etlua' | jq -R -s -c 'split("\n")[:-1]')
          echo "::set-output name=files::$content"
    outputs:
      files: ${{ steps.files.outputs.files }}

  select-files:
    runs-on: ubuntu-latest
    needs: [filesChanged]
    if: always()
    outputs:
      files: ${{ steps.selector.outputs.files }}
    steps:
      - name: Select file list
        id: selector
        run: |
          if [ -n '${{ inputs.files_override }}' ]; then
            echo "Usando lista de arquivos externa (modo rollback)."
            echo "files=${{ inputs.files_override }}" >> $GITHUB_OUTPUT
          else
            echo "Usando lista de arquivos detectada (modo sync normal)."
            echo "files=${{ needs.filesChanged.outputs.files }}" >> $GITHUB_OUTPUT
          fi

  determine_environment:
    needs: [select-files]
    name: Determinar Ambiente de Deploy
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
      contents: read
    outputs:
      final_env: ${{ steps.decide_env.outputs.environment_name }}
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Verificar Aprovadores e Definir Ambiente
        id: decide_env
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e

          PR_NUMBER=${{inputs.pr_number}}
          
          echo "PR encontrado: #${PR_NUMBER}"

          echo "Listando aprovadores para o PR #${PR_NUMBER}..."
          APPROVER_LIST=$(gh pr view $PR_NUMBER --json reviews --jq '.reviews.[] | select(.state == "APPROVED") | .author.login' | sort -u)
          if [ -z "$APPROVER_LIST" ]; then
            echo "Nenhum aprovador encontrado."
            APPROVER_LIST=""
          else
            echo "Aprovadores encontrados:"
            echo "$APPROVER_LIST"
          fi

          echo "Listando proprietários do repositório..."
          REPO_OWNER_TYPE=$(gh repo view ${{ github.repository }} --json owner --jq '.owner.type')
          
          if [[ "$REPO_OWNER_TYPE" == "Organization" ]]; then
            echo "Repositório de Organização. Lendo .github/CODEOWNERS..."
            
            CODEOWNERS_FILE_PATH=".github/CODEOWNERS"
            if [ ! -f "$CODEOWNERS_FILE_PATH" ]; then
              echo "::error::Arquivo CODEOWNERS não encontrado no caminho esperado: ${CODEOWNERS_FILE_PATH}."
              exit 1
            fi

            OWNER_TEAM_WITH_AT=$(grep '^*' "$CODEOWNERS_FILE_PATH" | grep -oE '@[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+' | head -n 1)
            if [ -z "$OWNER_TEAM_WITH_AT" ]; then
                echo "::error::Não foi possível encontrar um time proprietário padrão (ex: '* @org/time') no arquivo CODEOWNERS."
                exit 1
            fi
            
            OWNER_TEAM_SLUG="${OWNER_TEAM_WITH_AT#@}"
            echo "Time proprietário extraído do CODEOWNERS: ${OWNER_TEAM_SLUG}"

            OWNER_LIST=$(gh api "orgs/${{ github.repository_owner }}/teams/${OWNER_TEAM_SLUG}/members" --jq '.[].login')
          else
            echo "Repositório Pessoal. O proprietário é o dono do repositório."
            OWNER_LIST="${{ github.repository_owner }}"
          fi
          echo "Lista final de proprietários:"
          echo "$OWNER_LIST"

          echo "Comparando listas..."
          OWNER_APPROVER_COUNT=$(echo "${APPROVER_LIST}" | grep -F -x -f <(echo "${OWNER_LIST}") | wc -l)
          echo "Número de aprovadores que também são proprietários: ${OWNER_APPROVER_COUNT}"

          if (( $OWNER_APPROVER_COUNT >= 2 )); then
            FINAL_ENV=${{inputs.dynamic_environment}}
            echo "Decisão: Pelo menos 2 proprietários aprovaram. Selecionando ambiente '${FINAL_ENV}'."
          else
            FINAL_ENV=${{inputs.environment}}
            echo "Decisão: Menos de 2 proprietários aprovaram. Selecionando ambiente '${FINAL_ENV}'."
          fi

          echo "environment_name=${FINAL_ENV}" >> $GITHUB_OUTPUT
  apply:
    runs-on: ubuntu-latest
    needs: [select-files, determine_environment]
    environment: ${{ needs.determine_environment.outputs.final_env }}s
    strategy:
      fail-fast: false
      matrix:
        file: ${{ fromJson(needs.select-files.outputs.files) }}
    steps:
      - name: Checkout
        id: checkout_code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.stable_commit_sha }}

      - uses: kong/setup-deck@v1
        with:
          deck-version: 1.47.1

      - name: validate 
        run: echo "job finished"
